import os
import sys
import subprocess
import numpy as np
import pandas as pd
import nibabel as nib
from datetime import datetime
from nilearn import image, masking
from nilearn.glm.first_level import FirstLevelModel
import matplotlib.pyplot as plt

# Define Needed Functions
def get_most_recent_sambashare_dir(sambashare):
    try:
        directories = []
        for entry in os.scandir(sambashare):
            if entry.is_dir():
                directories.append(entry.path)
        # Looks for the most recently created directory
        latest_directory = max(directories, key=os.path.getctime)
        return latest_directory

    except Exception as e:
        print(e)
        return None

def get_latest_nii(directory):
     # List comprehension to get all files in the directory that end with '.dcm'
    dcm_files = [os.path.join(directory, file) for file in os.listdir(directory) if
                 os.path.isfile(os.path.join(directory, file)) and file.endswith(('.nii.gz', '.nii'))]

    if not dcm_files:
        return None

    # Return the latest modified .dcm file
    return max(dcm_files, key=os.path.getmtime)

def is_binary_mask(mask_path):
    # Load the mask image
    mask_img = nib.load(mask_path)
    mask_data = mask_img.get_fdata()

    # Get the unique values in the mask
    unique_values = np.unique(mask_data)

    # Check if the unique values are only 0 and 1
    if np.array_equal(unique_values, [0, 1]):
        return True
    else:
        return False


# Prelim Variables and Setup
print("This Script Registers a Binary ACC ROI MNI Mask to Subject Space, then Localizes Areas of Peak Activation in the MSIT Task")

timestamp = datetime.now().strftime("%Y-%m-%d_%H%M%S")
print(f"Outdir Timestamp to be used: {timestamp}")

inputDir = "/home/rt/rt-cloud/projects/adhd_rt/fnirtDir"
if not os.path.exists(inputDir):
    print(f"Could Not Find Input Dir:{inputDir}")
    sys.exit(1)

sambashareDirPath = "/home/rt/sambashare/"
if not sambashareDirPath:
    print("Could Not Find the Sambashare Dir")
    sys.exit(1)

outdir = ""
dicomDir = ""
acc_or_motor = ""

# Input Experimental Params
while True:
    pid = input("Enter Subject ID: ")
    if pid.startswith("P") and len(pid) == 4:
        print(f"Using PID: {pid}")
        break

    elif pid == "test":
        print(f"Using PID: test")
        break

    else:
        print("Invalid Subject ID. Please Make Sure input ID starts with 'P' and includes 3 Numbers")
        print("Ex: P002")
        print("Try Again.")

while True:
    acc_or_motor = input("Localize ACC or Motor Cortex? (a/m): ")
    if acc_or_motor == "a":
        print("Localizing ACC. Starting Now...")
        # harvard-oxford atlas mask 
        # mask = f"{inputDir}/HarOxACCbin.nii.gz"
        mask = f"{inputDir}/accbinEnlarged6_3.nii.gz" # large Mask 
        outdir = f"/home/rt/rt-cloud/projects/adhd_rt/fnirtDir/outDir/{pid}_acc_{timestamp}"
        break

    elif acc_or_motor == "m":
        print("Localizing Motor Cortex. Starting Now...")
        mask = f"{inputDir}/motor_mask.nii.gz"
        outdir = f"/home/rt/rt-cloud/projects/adhd_rt/fnirtDir/outDir/{pid}_motor_{timestamp}"
        break

    else:
        print("Invalid Option, Please Choose Either 'a' for ACC or 'm' for Motor Cortex. Try Again.")

# Make the Output Directory
os.makedirs(outdir)
if os.path.exists(outdir):
    print("------")
    print("OutDir located at:")
    print(outdir)
    print("------")
else:
    print(f"Could Not Create the Outdir at: {outdir}. Exiting Now")
    sys.exit(1)

# Get the Input Dicom Directory
try:
    dicomDir = get_most_recent_sambashare_dir(sambashareDirPath)
except Exception as e:
    print("Error Running get_most_recent_sambashare_dir()")
    print(e)
    sys.exit(1)
if os.path.exists(dicomDir):
    print("------")
    print(f"Grabbed Most Recent Sambashare Dicom Dir: {os.path.basename(dicomDir)}")
    print("------")
else:
    print("Could Not Get Most Recent Sambashare Dicom Dir")
    sys.exit(1)

# Setup Subject-Specific Input and Output Paths
MniBrain = f"{inputDir}/MNI152_T1_2mm_brain.nii.gz"
Func3dNii = f"{outdir}/{pid}_3d.nii.gz"
SSFunc3dNii = f"{outdir}/{pid}_3dSkullStripped.nii.gz"
Func3dMask = f"{outdir}/{pid}_3dbrainmask.nii.gz"
MaskDir = "/home/rt/rt-cloud/projects/adhd_rt/subjects"
if os.path.exists(MaskDir):
    print(f"Mask Dir is: {MaskDir}")
else:
    print(f"Could Not Find Mask Dir: {MaskDir}")
    sys.exit(1)
RegisteredMask = os.path.join(MaskDir, f"{pid}_Reg_subjspaceMask_{timestamp}.nii.gz")


""" ==== DICOM TO NIFTI CONVERSION ==== """
print("Converting Dicom to Nifti...")
try:
    subprocess.run(["dcm2niix", "-o", outdir, dicomDir])
except Exception as e:
    print("Error Running dcm2niix:")
    print(e)
    sys.exit(1)
try:
    Func4dNii = get_latest_nii(outdir)
except Exception as e:
    print("Error Running get_latest_nii()")
    print(e)
    sys.exit(1)
if os.path.exists(Func4dNii):
    print("------")
    print("4d Functional Nifti Image Created.")
    print(f"Find at: {Func4dNii}")
    print("------")
else:
    print(f"Could not find an nii image at: {outdir}")
    sys.exit(1)

""" === CUT 3D SLICE === """
print("Cutting off first 3d slice from func data...")
try:
    # fslroi ${Func4dNii} ${Func3dNii} 0 -1 0 -1 0 -1 0 1
    subprocess.run(["fslroi", Func4dNii, Func3dNii, "0", "-1", "0", "-1", "0", "-1", "0", "1"])
except Exception as e:
    print("Could not cut off 3d frame from 4d data:")
    print(e)
    sys.exit(1)
if os.path.exists(Func3dNii):
    print("------")
    print("3d Functional Nifti Image Created.")
    print(f"Find at: {Func3dNii}:")
    print("------")
else:
    print(f"Could not find the 3d nii image: {Func3dNii}")
    sys.exit(1)

""" ==== SKULL STRIP  ===="""
print("Skull Stripping the 3d Functional Time ... ")
try:
    subprocess.run(["bet", Func3dNii, SSFunc3dNii])
except Exception as e:
    print("Skull Stripping Via bet Failed:")
    print(e)
    sys.exit(1)
if os.path.exists(SSFunc3dNii):
    print("------")
    print("Skull Stripped 3d Functional Nifti Image Created.")
    print(f"Find at: {SSFunc3dNii}:")
    print("------")
else:
    print(f"Could not find the 3d Skull Stripped Nifti Image: {SSFunc3dNii}")
    sys.exit(1)

""" ==== REF BRAIN MASK ==== """
print("Creating Reference Brain Mask ... ")
# fslmaths ${SSFunc3dNii} -bin ${Func3dMask} # binarize
try:
    subprocess.run(["fslmaths", SSFunc3dNii, "-bin", Func3dMask])
except Exception as e:
    print("Error Binarizing the Skull Stripped 3d Func Data using fslmaths: ")
    print(e)
    sys.exit(1)
if os.path.exists(Func3dMask):
    print("------")
    print("Reference Brain Mask Created.")
    print(f"Find at: {Func3dMask}:")
    print("------")
else:
    print(f"Could not find the Reference Brain Mask: {Func3dMask}")
    sys.exit(1)

""" ==== FLIRT ==== """
print("Starting Flirt ...")
try:
    # flirt -ref ${Func3dNii} -in ${MniBrain} -omat ${outdir}/${pid}_affine_transform.mat -out ${outdir}/${pid}_affine.nii.gz
    subprocess.run(["flirt", "-ref", Func3dNii, "-in", MniBrain, "-omat", f"{outdir}/{pid}_affine_transform.mat", "-out", f"{outdir}/{pid}_affine.nii.gz"])
except Exception as e:
    print("Flirt Failed:")
    print(e)
    sys.exit(1)
if os.path.exists(f"{outdir}/{pid}_affine_transform.mat"):
    print("------")
    print("Flirt Affine Transform Matrix Created.")
    print(f"Find at: {outdir}/{pid}_affine_transform.mat")
    print("------")
else:
    print(f"Could not find the Flirt Affine Transform Matrix: {outdir}/{pid}_affine_transform.mat")
    sys.exit(1)
if os.path.exists(f"{outdir}/{pid}_affine.nii.gz"):
    print("------")
    print("Affine Transform Nifti Image Created.")
    print(f"Find at: {outdir}/{pid}_affine.nii.gz")
    print("------")
else:
    print(f"Could not find Affine Transform Nifti Image: {outdir}/{pid}_affine.nii.gz")
    sys.exit(1)


""" ==== APPLY FLIRT ==== """
print("Applying Flirt ...")
# flirt -ref ${Func3dNii} -in ${mask} -applyxfm -interp nearestneighbour -init ${outdir}/${pid}_affine_transform.mat -out ${outdir}/${pid}_affine_mask.nii.gz
try:
    subprocess.run(["flirt", "-ref", Func3dNii, "-in", mask, "-applyxfm", "-interp", "nearestneighbour", "-init", f"{outdir}/{pid}_affine_transform.mat", "-out", f"{outdir}/{pid}_affine_mask.nii.gz"])
except Exception as e:
    print("Error Applying Flirt:")
    print(e)
    sys.exit(1)
if os.path.exists(f"{outdir}/{pid}_affine_mask.nii.gz"):
    print("------")
    print("SubjSpace Affine ROI Mask Created.")
    print(f"Find at: {outdir}/{pid}_affine_mask.nii.gz")
    print("------")
else:
    print(f"Could not find SubjSpace Affine ROI Mask: {outdir}/{pid}_affine_mask.nii.gz")
    sys.exit(1)


""" ==== STARTING FNIRT ==== """
print("Starting Fnirt ...")
try:
    subprocess.run(["fnirt", f"--ref={Func3dNii}", f"--in={MniBrain}", f"--refmask={Func3dMask}", f"--aff={outdir}/{pid}_affine_transform.mat", f"--cout={outdir}/{pid}_nonlinear_transform", f"--iout={outdir}/{pid}_MniBraininSubjSpace.nii.gz"])
except Exception as e:
    print("Error Running Fnirt:")
    print(e)
    sys.exit(1)
if os.path.exists(f"{outdir}/{pid}_nonlinear_transform.nii.gz"):
    print("------")
    print("NonLinear Transform Matrix Created.")
    print(f"Find at:{outdir}/{pid}_nonlinear_transform.nii.gz")
    print("------")
else:
    print(f"Could Not Find NonLinear Transform Matrix: {outdir}/{pid}_.nii.gnonlinear_transformz")
    sys.exit(1)

if os.path.exists(f"{outdir}/{pid}_MniBraininSubjSpace.nii.gz"):
    print("------")
    print("MNI Brain in Subject Space Nifti Image Created.")
    print(f"Find at:{outdir}/{pid}_MniBraininSubjSpace.nii.gz")
    print("------")
else:
    print(f"Could Not Find MNI Brain in Subject Space Nifti Image: {outdir}/{pid}_MniBraininSubjSpace.nii.gz")
    sys.exit(1)

""" ==== APPLYING FNIRT ==== """
# applywarp --ref=${Func3dNii} --in=${mask} \
#           --interp=nn \
#           --warp=${outdir}/${pid}_nonlinear_transform --out=${outdir}/P00${pid}_subjspaceMask.nii.gz

print("Applying Fnirt ...")
try:
    subprocess.run(["applywarp", f"--ref={Func3dNii}", f"--in={mask}", "--interp=nn", f"--warp={outdir}/{pid}_nonlinear_transform", f"--out={RegisteredMask}"])
except Exception as e:
    print("Error Applying Fnirt:")
    print(e)
    sys.exit(1)

if os.path.exists(RegisteredMask):
    print("------")
    print(f"Final Subject Space Mask Created.")
    print(f"Find at: {RegisteredMask}")
    print("------")
else:
    print(f"Could Not Find Final Subject Space Mask: {RegisteredMask}")
    sys.exit(1)

""" ============================================================================================= """
""" ============================================================================================= """
"""
print("Fnirt Registration Complete.")
print("ACC Masks undergo task-based Localization. Starting MSIT Localizer ... ")

if is_binary_mask(RegisteredMask):
    print("ACC Mask is Binary")
else:
    print(f"NOTE: ACC Mask at {RegisteredMask} is NOT binary")
    print("Binarizing Mask Now ...")
    try:
        RegisteredMask = image.binarize_img(RegisteredMask, threshold=0)
    except Exception as e:
        print("Error Binarizing the ACC mask")
        sys.exit(1)

# Event CSV
events = pd.read_table('/home/rt/rt-fMRI_Neurofeedback_of_ADHD/adhd_rt/msit_events.csv', delimiter=',')
if os.path.exists('/home/rt/rt-fMRI_Neurofeedback_of_ADHD/adhd_rt/msit_events.csv'):
    print("------")
    print(f"Using MSIT Event CSV at: {events}")
    print("------")

else:
    print(f"Could not find MSIT Event CSV at: {events}")
    sys.exit(1)

# Skull Strip 4d Data
print("Skull Stripping Data ... ")
try:
    subj_skull_stripped = masking.compute_brain_mask(Func4dNii)
    print(f"Data is Skull Stripped")
except Exception as e:
    print("Error running: masking.compute_brain_mask()")
    sys.exit(1)

print("starting GLM ... ")
fmri_glm = FirstLevelModel(t_r=1.06,
                           standardize=False,
                           signal_scaling=0,
                           smoothing_fwhm=6,
                           hrf_model=None,
                           drift_model='cosine',
                           high_pass=0.01,
                           mask_img=RegisteredMask)

print("Fitting FirstLevelModel to Subject Data ...")
fmri_glm = fmri_glm.fit(Func4dNii, events)

design_matrix = fmri_glm.design_matrices_[0]
num_conditions = design_matrix.shape[1]
print('Number of conditions in the design matrix:', num_conditions)

conditions = {"control": np.zeros(num_conditions), "interference": np.zeros(num_conditions)}
conditions["interference"][1] = 1
conditions["control"][0] = 1
inter_minus_con = conditions["interference"] - conditions["control"]

print("Length of inter_minus_con:", len(inter_minus_con))
print(f"Inter Minus Con: {inter_minus_con}")



try:
    z_map = fmri_glm.compute_contrast(inter_minus_con, output_type='z_score')
    print("Ran compute_contrast()")
except Exception as e:
    print("Could not run compute_contrast()")
    print(e)
    sys.exit(1)

zThresh = 1
while True:
    choseThr = input(f"Threshold Binary Mask at Z-score of {zThresh}? (y/n): ")
    if choseThr == "y":
        print(f"Ok, Mask will include voxels with a Z-score of {zThresh} or higher.")
        break
    elif choseThr == "n":
        while True:
            try:
                zThresh = float(input("Please input desired z-score threshold: "))
                if not 0 <= zThresh <= 4:
                    print("Please Choose a number between 0 - 4, with no non-number characters. Try Again.")
                else:
                    print(f"Ok, Mask will include voxels with a Z-score of {zThresh} or higher.")
                    break
            except ValueError:
                print("Please Choose a number between 0 - 4, with no non-number characters. Try Again.")
        break
    else:
        print("Please Choose either 'y' for Yes or 'n' for No. Try Again.")
try:
    z_mapBin = image.binarize_img(z_map, threshold=zThresh)
    print("Ran binarize_img()")
except Exception as e:
    print("Could Not Run binarize_img()")
    print(e)
    sys.exit(1)
z_mapBinPath = os.path.join(MaskDir, f"{pid}_LocalizedAccMask_{timestamp}.nii")
try:
    nib.save(z_mapBin, z_mapBinPath)
    print(f"Localized Mask Saved at: {z_mapBinPath}")
except Exception as e:
    print(f"Could Not Save Final Localized Mask to Path: {z_mapBinPath}")
    print(e)
    sys.exit(1)

if os.path.exists(z_mapBinPath):
    print("Localizer Is Done.")
else:
    print(f"Could Not Find Final Localized Mask at Path: {z_mapBinPath}")


visualize = ""
while True:
    visualize = input("Visualize Results? (y/n): ")
    if visualize == 'y':
        print("Ok. Starting Visualization Process Now ... ")
        break
    elif visualize == 'n':
        print("Ok. Ending Now.")
        break
    else:
        print("Invalid Input. Please press either the 'y' key or the 'n' key. Try Again: ")


if visualize == 'y':

    img = nib.load(Func3dNii)
    mask = RegisteredMask
    data = img.get_fdata()
    mask_data = mask.get_fdata()

    # Function to display slices with mask overlay
    def show_slices_with_mask(slices, masks):
        fig, axes = plt.subplots(1, len(slices))
        for i, (slice, mask_slice) in enumerate(zip(slices, masks)):
            axes[i].imshow(slice.T, cmap="gray", origin="lower")
            axes[i].imshow(mask_slice.T, cmap="Reds", alpha=0.5, origin="lower")
        plt.show()


    # Select slices from the 3D image and mask
    slice_0 = data[50, :, :]  # sagittal
    mask_0 = mask_data[50, :, :]
    slice_1 = data[:, 50, :]  # coronal
    mask_1 = mask_data[:, 50, :]
    slice_2 = data[:, :, 50]  # axial
    mask_2 = mask_data[:, :, 50]

    # Display the slices with mask overlay
    show_slices_with_mask([slice_0, slice_1, slice_2], [mask_0, mask_1, mask_2])
"""